// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tbb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct TBBBlocks {
    // message fields
    pub basic_blocks: ::protobuf::RepeatedField<TBBBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TBBBlocks {
    fn default() -> &'a TBBBlocks {
        <TBBBlocks as ::protobuf::Message>::default_instance()
    }
}

impl TBBBlocks {
    pub fn new() -> TBBBlocks {
        ::std::default::Default::default()
    }

    // repeated .TBBBlock basic_blocks = 1;


    pub fn get_basic_blocks(&self) -> &[TBBBlock] {
        &self.basic_blocks
    }
    pub fn clear_basic_blocks(&mut self) {
        self.basic_blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_basic_blocks(&mut self, v: ::protobuf::RepeatedField<TBBBlock>) {
        self.basic_blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_basic_blocks(&mut self) -> &mut ::protobuf::RepeatedField<TBBBlock> {
        &mut self.basic_blocks
    }

    // Take field
    pub fn take_basic_blocks(&mut self) -> ::protobuf::RepeatedField<TBBBlock> {
        ::std::mem::replace(&mut self.basic_blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TBBBlocks {
    fn is_initialized(&self) -> bool {
        for v in &self.basic_blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.basic_blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.basic_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.basic_blocks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TBBBlocks {
        TBBBlocks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TBBBlock>>(
                "basic_blocks",
                |m: &TBBBlocks| { &m.basic_blocks },
                |m: &mut TBBBlocks| { &mut m.basic_blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TBBBlocks>(
                "TBBBlocks",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TBBBlocks {
        static instance: ::protobuf::rt::LazyV2<TBBBlocks> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TBBBlocks::new)
    }
}

impl ::protobuf::Clear for TBBBlocks {
    fn clear(&mut self) {
        self.basic_blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TBBBlocks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TBBBlocks {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TBBBlock {
    // message fields
    address: ::std::option::Option<u64>,
    n: ::std::option::Option<u32>,
    thumb_mode: ::std::option::Option<bool>,
    isync: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TBBBlock {
    fn default() -> &'a TBBBlock {
        <TBBBlock as ::protobuf::Message>::default_instance()
    }
}

impl TBBBlock {
    pub fn new() -> TBBBlock {
        ::std::default::Default::default()
    }

    // required uint64 address = 1;


    pub fn get_address(&self) -> u64 {
        self.address.unwrap_or(0)
    }
    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = ::std::option::Option::Some(v);
    }

    // required uint32 n = 2;


    pub fn get_n(&self) -> u32 {
        self.n.unwrap_or(0)
    }
    pub fn clear_n(&mut self) {
        self.n = ::std::option::Option::None;
    }

    pub fn has_n(&self) -> bool {
        self.n.is_some()
    }

    // Param is passed by value, moved
    pub fn set_n(&mut self, v: u32) {
        self.n = ::std::option::Option::Some(v);
    }

    // optional bool thumb_mode = 3;


    pub fn get_thumb_mode(&self) -> bool {
        self.thumb_mode.unwrap_or(false)
    }
    pub fn clear_thumb_mode(&mut self) {
        self.thumb_mode = ::std::option::Option::None;
    }

    pub fn has_thumb_mode(&self) -> bool {
        self.thumb_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thumb_mode(&mut self, v: bool) {
        self.thumb_mode = ::std::option::Option::Some(v);
    }

    // optional uint32 isync = 4;


    pub fn get_isync(&self) -> u32 {
        self.isync.unwrap_or(0)
    }
    pub fn clear_isync(&mut self) {
        self.isync = ::std::option::Option::None;
    }

    pub fn has_isync(&self) -> bool {
        self.isync.is_some()
    }

    // Param is passed by value, moved
    pub fn set_isync(&mut self, v: u32) {
        self.isync = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TBBBlock {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.n.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.n = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.thumb_mode = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.isync = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.n {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.thumb_mode {
            my_size += 2;
        }
        if let Some(v) = self.isync {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.n {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.thumb_mode {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.isync {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TBBBlock {
        TBBBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "address",
                |m: &TBBBlock| { &m.address },
                |m: &mut TBBBlock| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "n",
                |m: &TBBBlock| { &m.n },
                |m: &mut TBBBlock| { &mut m.n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "thumb_mode",
                |m: &TBBBlock| { &m.thumb_mode },
                |m: &mut TBBBlock| { &mut m.thumb_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "isync",
                |m: &TBBBlock| { &m.isync },
                |m: &mut TBBBlock| { &mut m.isync },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TBBBlock>(
                "TBBBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TBBBlock {
        static instance: ::protobuf::rt::LazyV2<TBBBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TBBBlock::new)
    }
}

impl ::protobuf::Clear for TBBBlock {
    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.n = ::std::option::Option::None;
        self.thumb_mode = ::std::option::Option::None;
        self.isync = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TBBBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TBBBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ttbb.proto\"9\n\tTBBBlocks\x12,\n\x0cbasic_blocks\x18\x01\x20\x03(\
    \x0b2\t.TBBBlockR\x0bbasicBlocks\"g\n\x08TBBBlock\x12\x18\n\x07address\
    \x18\x01\x20\x02(\x04R\x07address\x12\x0c\n\x01n\x18\x02\x20\x02(\rR\x01\
    n\x12\x1d\n\nthumb_mode\x18\x03\x20\x01(\x08R\tthumbMode\x12\x14\n\x05is\
    ync\x18\x04\x20\x01(\rR\x05isync\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
